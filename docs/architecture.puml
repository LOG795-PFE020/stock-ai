@startuml Stock AI Pipeline Architecture

' Style settings
skinparam componentStyle uml2
skinparam component {
    BackgroundColor LightBlue
    BorderColor DarkBlue
}
skinparam linetype polyline
skinparam package {
    BorderColor DarkGrey
    BackgroundColor White
}
skinparam arrow {
    Color DarkBlue
    FontColor DarkGrey
}

' Main Layout
left to right direction

' Core Infrastructure (Base Layer)
package "Core Infrastructure" as core {
    [Configuration + Utils] as core_utils
    [Logging + Progress] as core_logging
}

' Frontend Layer
package "API Layer" {
    [FastAPI Routes] as routes
    [Pydantic Schemas] as schemas
}

' Services Layer
package "Services" {
    ' Data Processing Group
    package "Data Processing" {
        [Data Service] as data_service
        [Model Service] as model_service #LightGreen
        [News Service] as news_service
    }

    ' Prediction Group
    package "ML Pipeline" {
        [Training Service] as training_service
        [Prediction Service] as prediction_service
    }
}

' Storage Layer
package "Storage" {
    database "Data Storage" {
        [Stock Data] as stock_data
        [News Data] as news_data
    }
    database "Model Storage" {
        [General Models] as general_models
        [Specific Models] as specific_models
        [Prophet Models] as prophet_models
    }
}

' Initialization Sequence
routes -[#Green]-> data_service : 1. Initialize
data_service -[#Green]-> model_service : 2. Initialize
model_service -[#Green]-> news_service : 3. Initialize
news_service -[#Green]-> training_service : 4. Initialize
training_service -[#Green]-> prediction_service : 5. Initialize

' Runtime Dependencies
data_service --> stock_data : read/write
news_service --> news_data : read/write
model_service --> general_models : manage
model_service --> specific_models : manage
model_service --> prophet_models : manage

' API Routes
routes --> schemas : validate
schemas --> data_service : "/data"
schemas --> news_service : "/news"
schemas --> prediction_service : "/predict"
schemas --> training_service : "/train"

' Core Support
core_utils --> data_service
core_utils --> model_service
core_utils --> news_service
core_logging --> data_service
core_logging --> model_service
core_logging --> news_service

legend right
  Initialization Flow
  ==
  1. Data Service
  2. Model Service
  3. News Service
  4. Training Service
  5. Prediction Service
endlegend

@enduml 